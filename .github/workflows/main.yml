name: automatic pr creation
on:
  pull_request_target:
    types:
      - closed
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  
jobs:
  determine-base-branches:
    runs-on: ubuntu-latest
    outputs:
      base_branches: ${{ steps.set-matrix.outputs.base_branches }}
    steps:
      - name: Set Matrix Based on Branch Type
        id: set-matrix
        run: |
          echo "${{ github.head_ref }}"
          if [[ "${{ github.head_ref }}" == hotfix-prod ]]; then
            echo 'base_branches=[{"source":"main","target":"uat"},{"source":"uat","target":"qa"}]' >> $GITHUB_OUTPUT
          elif [[ "${{ github.head_ref }}" == hotfix-uat ]]; then
            echo 'base_branches=[{"source":"uat","target":"qa"}]' >> $GITHUB_OUTPUT
          else
            echo 'base_branches=[]' >> $GITHUB_OUTPUT
          fi

  create-pr:
    if: github.event.pull_request.merged == true
    needs: determine-base-branches
    runs-on: ubuntu-latest
    strategy:
      matrix:
        base: ${{ fromJson(needs.determine-base-branches.outputs.base_branches) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
      - name: Check the values
        run: |
          echo "${{ needs.determine-base-branches.outputs.base_branches }}"
          echo "${{ github.head_ref }}"
          echo "${{ github.base_ref }}"
      # - name: Check for Changes
      #   id: check-diff
      #   run: |
      #     git fetch origin ${{ matrix.base }}  # Fetch latest base branch
      #     if git diff --quiet ${{ matrix.base }} ${{ github.head_ref }}; then
      #       echo "No changes detected. Skipping PR creation."
      #       echo "changes_exist=false" >> $GITHUB_ENV
      #     else
      #       echo "Changes detected. Proceeding with PR creation."
      #       echo "changes_exist=true" >> $GITHUB_ENV
      #     fi
      # - name: Create Pull Request
      #   if: env.changes_exist == 'true'
      #   env:
      #     GH_TOKEN: ${{ secrets.HUB_TOKEN }}
      #   run: |
      #     PR_URL=$(gh pr create --base ${{ matrix.base }} --head ${{ github.head_ref }} --title "Auto PR: ${{ github.head_ref }} â†’ ${{ matrix.base }}" --body "Automatically created when a PR from hotfix to production is raised.")
      #     PR_NUMBER=$(basename "$PR_URL")
      #     echo "PR_URL=$PR_URL"
      #     echo "PR_URL=$PR_URL" >> $GITHUB_ENV
      #     echo "PR_NUMBER=$PR_NUMBER"
      #     echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
      # - name: Auto Approve PR
      #   if: success() && env.PR_NUMBER != ''
      #   uses: hmarr/auto-approve-action@v4
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     pull-request-number: ${{ env.PR_NUMBER }}
      #     review-message: "Automatic Approved"
      # - name: Auto Merge PR
      #   #if: github.event.review.state == 'approved'
      #   run: |
      #     gh pr merge "$PR_URL" --auto --squash || echo "auto merge failed, need manual review and merge"
      #     echo "${{ github.event.review.state }}"
      #   env:
      #     GH_TOKEN: ${{ secrets.HUB_TOKEN }}
      #     PR_URL: ${{ env.PR_URL }}